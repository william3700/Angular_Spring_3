******************** CONEXIÃ“N A BASE DATOS *************************

spring.datasource.url=jdbc:mysql://localhost:3307/economia
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver



///****////
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.globally_quoted_identifiers=true

spring.datasource.url=jdbc:mysql://localhost:3307/economia
spring.datasource.username=root
spring.datasource.password=
spring.jpa.show-sql=true


******************** MODELO ***************************************

@Entity
public class Persona{

  @Id
  @GenerateValue(strategy=GenerationType.IDENTITY)
  private long id;
  
  @Column
  private String nombre;
  
  @Column
  private String telefono;
  
  Getter y Setter -> para todos los atributos

}

******************** CONTROLADOR **********************************

@RestController
public class Controller{

   @Autowired
   private UsuarioService service;

   @GetMapping()
   public String index(){
      return "Conectado";
   }

   @GetMapping("personas")
   public Lista<Persona> getAll(){
      return service.getPersonas();
   }   

   @PostMapping("grabar")
   public String save(@RequestBody Persona p){
      service.saveOrUpdate(p);
      return "Guardado";
   }
   
   @PutMapping("editar/{id}")
   public String update(@PathVariable Long id,@RequestBody Persona p){
      Persona updatePersona=repo.findById(id).get();
      updatePersona.setNombre(p.getNombre());
      updatePersona.setTelefono(p.getTelefono());
      repo.save(updatePersona);
      return "Editado correctamente";
   }
   
   @DeleteMapping("delete/{id}")
   public String delete(@PathVariable(id) Long id){
      service.delete(id);
      return "Eliminado";
   }

}

******************** SERVICIOS ************************************

@Service

public class UsuarioService{
  @Autowired
  Repositorio repo;
  
  public List<Persona> getPersonas(){
      return repo.findAll();
  }
  
   public Optional<Persona> getPersona(Long id){
      return repo.findById(id);
  } 
  
  public void saveOrUpdate(Persona p){
     repo.save(p);
  }
  
  public void delete(Long id){
     repo.deleteById(id);
  }
  
}


******************** REPOSITORIO **********************************

public interface Repository extends JpaRepository<Persona, Long>{


}









